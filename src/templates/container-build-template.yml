---
AWSTemplateFormatVersion: "2010-09-09"
Description: >-
    (WWPS-GLS-WF-CONTAINER-BUILD) Creates resources for building a Docker container
    image using CodeBuild, storing the image in ECR, and optionally creating a 
    corresponding Batch Job Definition.
    It is recommended to name this stack "container-{ContainerName}".
Mappings:
    TagMap:
    default:
        architecture: "genomics-workflows"
        tags:
        - Key: "architecture"
            Value: "genomics-workflows"
        
Parameters:
    ContainerName:
    Description: Name of the container (does not include tag)
    Type: String
    
    GitRepoType:
    Description: >
        Git repository hosting provider.
    Type: String
    Default: GITHUB
    AllowedValues:
        - CODECOMMIT
        - GITHUB
        - BITBUCKET
    
    GitCloneUrlHttp:
    Description: >
        The HTTP clone url for the GitHub repository that has container source code.
        For example - http://github.com/user/repo.git
    Type: String
    
    ProjectBranch:
    Description: branch, tag, or commit to use
    Type: String
    Default: master
    
    ProjectPath:
    Description: >
        Relative path in the repository to enter for the build.
        For example - ./path/to/container
    Type: String
    Default: "."
    
    ProjectBuildSpecFile:
    Description: >
        Relative path to the project buildspec.yml file or equivalent.
        Leave blank to use the template defined buildspec script.
    Default: "buildspec.yml"
    Type: String
    
    CreateBatchJobDefinition:
    Description: >
        Create an AWS Batch Job Definition for the container
    Type: String
    Default: "No"
    AllowedValues:
        - "Yes"
        - "No"

Conditions:
    CreateBatchJobDefinitionTrue:
    Fn::Equals:
    - !Ref CreateBatchJobDefinition
    - "Yes"

Resources:
    IAMCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
        Description: !Sub codebuild-service-role-${AWS::StackName}-${AWS::Region}
        Path: /service-role/
        AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            - Effect: Allow
            Principal:
                Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
        Policies:
        - PolicyName: !Sub codebuild-basepolicy-${AWS::StackName}-${AWS::Region}
            PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                Resource:
                    - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*"
                Action:
                    - codebuild:CreateReportGroup
                    - codebuild:CreateReport
                    - codebuild:UpdateReport
                    - codebuild:BatchPutTestCases

                - Effect: Allow
                Resource:
                    - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
                    - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*:*"
                Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents

                - Effect: Allow
                Resource:
                    # Constructing the ARN manually here since we are using a custom
                    # resource to create the repository
                    - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ContainerName}"
                Action:
                    - ecr:BatchCheckLayerAvailability
                    - ecr:CompleteLayerUpload
                    - ecr:InitiateLayerUpload
                    - ecr:PutImage
                    - ecr:UploadLayerPart
                
                - Effect: Allow
                Resource: "*"
                Action:
                    - ecr:GetAuthorizationToken

    CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
        Description: !Sub >-
        Builds the container image ${ContainerName}
        Artifacts:
        Type: NO_ARTIFACTS
        Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:1.0
        ComputeType: BUILD_GENERAL1_LARGE
        PrivilegedMode: True
        EnvironmentVariables:
            - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
            
            - Name: REGISTRY
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com"
            
            - Name: CONTAINER_NAME
            Value: !Ref ContainerName
            
            - Name: PROJECT_BRANCH
            Value: !Ref ProjectBranch
            
            - Name: PROJECT_PATH
            Value: !Ref ProjectPath

        ServiceRole: !GetAtt IAMCodeBuildRole.Arn
        Source:
        Type: !Ref GitRepoType
        Location: !Ref GitCloneUrlHttp
        BuildSpec: !Ref ProjectBuildSpecFile

        Tags: !FindInMap ["TagMap", "default", "tags"]
    
    IAMLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: Allow
            Principal:
                Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
        Path: /
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        Policies:
        - PolicyName: !Sub codebuild-access-${AWS::Region}
            PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: Allow
                Action:
                    - "codebuild:StartBuild"
                    - "codebuild:BatchGetBuilds"
                Resource: "*"
        
        - PolicyName: !Sub ecr-access-${AWS::Region}
            PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                Resource: "*"
                Action:
                    - "ecr:GetAuthorizationToken"
                - Effect: Allow
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*"
                Action:
                    - "ecr:DescribeRepositories"
                    - "ecr:CreateRepository"
                - Effect: Allow
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ContainerName}"
                Action:
                    - "ecr:*LifecyclePolicy"
                    - "ecr:DeleteRepository"
                    - "ecr:BatchDeleteImage"
    
    CodeBuildInvocation:
    Type: Custom::CodeBuildInvocation
    Properties:
        ServiceToken: !GetAtt CodeBuildInvocationFunction.Arn
        BuildProject: !Ref CodeBuildProject
    
    # Need to explicitly define dependency on the ECR Custom Resource
    DependsOn: ECRRepositoryHandler
    
    CodeBuildInvocationFunction:
    Type: AWS::Lambda::Function
    Properties:
        Handler: index.handler
        Role: !GetAtt IAMLambdaExecutionRole.Arn
        Runtime: python3.7
        Timeout: 900  # if containers take more than 15m to build, consider using a WaitCondition
        Code:
        ZipFile: |
            from time import sleep
            import boto3
            import cfnresponse
            def handler(event, context):
                if event['RequestType'] in ("Create", "Update"):
                    codebuild = boto3.client('codebuild')
                    build = codebuild.start_build(
                        projectName=event["ResourceProperties"]["BuildProject"]
                    )['build']
                            
                    id = build['id']
                    status = build['buildStatus']
                    while status == 'IN_PROGRESS':
                        sleep(10)
                        build = codebuild.batch_get_builds(ids=[id])['builds'][0]
                        status = build['buildStatus']
                    
                    if status != "SUCCEEDED":
                        cfnresponse.send(event, context, cfnresponse.FAILED, None)
                
                cfnresponse.send(event, context, cfnresponse.SUCCESS, None)
    
    # ECR Repositories defined by CloudFormation currently do not support Deletion
    # or UpdateReplace Policies.  This will cause failures when this stack or a 
    # parent stack (if this template is nested) are deleted or updated.
    #
    # To work around this, we can use a custom resource that handles:
    #  * pre-existing repositories on create and update events
    #  * retaining repositories on delete events

    # # Preferred way to create an ECR Image Repository
    # # Leaving this here for reference
    # ECRRepository:
    #   Type: "AWS::ECR::Repository"
    #   Properties:
    #     RepositoryName: !Ref ContainerName
    #     LifecyclePolicy:
    #       LifecyclePolicyText: |-
    #         {
    #             "rules": [
    #                 {
    #                     "rulePriority": 1,
    #                     "description": "Keep only one untagged image, expire all others",
    #                     "selection": {
    #                         "tagStatus": "untagged",
    #                         "countType": "imageCountMoreThan",
    #                         "countNumber": 1
    #                     },
    #                     "action": {
    #                         "type": "expire"
    #                     }
    #                 }
    #             ]
    #         }

    ECRRepositoryHandler:
    Type: Custom::ECRRepositoryHandler
    Properties:
        ServiceToken: !GetAtt ECRRepositoryHandlerFunction.Arn
        RepositoryName: !Ref ContainerName
        DeletePolicy: Retain
        UpdateReplacePolicy: Retain
        LifecyclePolicy:
        LifecyclePolicyText: |-
            {
                "rules": [
                    {
                        "rulePriority": 1,
                        "description": "Keep only one untagged image, expire all others",
                        "selection": {
                            "tagStatus": "untagged",
                            "countType": "imageCountMoreThan",
                            "countNumber": 1
                        },
                        "action": {
                            "type": "expire"
                        }
                    }
                ]
            }
    ECRRepositoryHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
        Handler: index.handler
        Role: !GetAtt IAMLambdaExecutionRole.Arn
        Runtime: python3.7
        Timeout: 10
        Code:
        ZipFile: |
            from time import sleep
            import boto3
            import cfnresponse
            send, SUCCESS, FAILED = (
                cfnresponse.send, 
                cfnresponse.SUCCESS, 
                cfnresponse.FAILED
            )
            ecr = boto3.client('ecr')
            def wait(repo, until):
                until = until.lower()
                if until == "deleted":
                    while True:
                        try:
                            sleep(1)
                            ecr.describe_repositories(repositoryNames=[repo])
                        except ecr.exceptions.RepositoryNotFoundException:
                            break
                
                if until == "exists":
                    exists = False
                    while not exists:
                        try:
                            sleep(1)
                            exists = ecr.describe_repositories(repositoryNames=[repo])["repositories"]
                            break
                        except ecr.exceptions.RepositoryNotFoundException:
                            exists = False
            
            def put_lifecycle_policy(repo, props):
                if props.get("LifecyclePolicy"):
                    ecr.put_lifecycle_policy(
                        repositoryName=repo,
                        lifecyclePolicyText=props["LifecyclePolicy"]["LifecyclePolicyText"]
                    )
            def create(repo, props, event, context):
                # use existing repository if available, otherwise create
                try:
                    ecr.create_repository(repositoryName=repo)
                    wait(repo, "exists")
                    put_lifecycle_policy(repo, props)
                    
                except ecr.exceptions.RepositoryAlreadyExistsException:
                    print(f"Repository '{repo}' already exists - CREATE ECR repository ignored")
                    put_lifecycle_policy(repo, props)
                    
                except Exception as e:
                    send(event, context, FAILED, None)
                    raise(e)
            def update(repo, props, event, context):
                # use existing repository if available
                update_policy = props.get("UpdateReplacePolicy")
                try:
                    if update_policy and update_policy.lower() == "retain":
                        put_lifecycle_policy(repo, props)
                    else:
                        # replace the repo
                        delete(repo, props, event, context)
                        create(repo, props, event, context)
                except Exception as e:
                    send(event, context, FAILED, None)
                    raise(e)
            def delete(repo, props, event, context):
                # retain repository if specified
                # otherwise force delete
                delete_policy = props.get("DetetePolicy")
                try:
                    if delete_policy and not delete_policy.lower() == "retain":
                        ecr.delete_repository(repositoryName=repo, force=True)
                        wait(repo, "deleted")
                
                except Exception as e:
                    send(event, context, FAILED, None)
                    raise(e)
            def handler(event, context):
                props = event["ResourceProperties"]
                repo = props.get("RepositoryName")
                
                if event["RequestType"] in ("Create", "Update", "Delete"):
                    action = globals()[event["RequestType"].lower()]
                    action(repo, props, event, context)
                    send(event, context, SUCCESS, None)
                else:
                    # unhandled request type
                    send(event, context, FAILED, None)    
                
    
    BatchJobDef:
    Type: AWS::Batch::JobDefinition
    Condition: CreateBatchJobDefinitionTrue
    Properties:
        JobDefinitionName: !Ref ContainerName
        Type: container
        ContainerProperties:
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ContainerName}
        Vcpus: 8
        Memory: 16000
        Volumes:
            - Host:
                SourcePath: /opt/miniconda
            Name: awscli
        MountPoints:
            - ContainerPath: /opt/miniconda
            SourceVolume: awscli
        
Outputs:  
    CodeBuildProject:
    Value: !GetAtt CodeBuildProject.Arn
    Export:
        Name: !Sub ${AWS::StackName}-CodeBuildProject
    
    CodeBuildServiceRole:
    Value: !GetAtt IAMCodeBuildRole.Arn
    Export:
        Name: !Sub ${AWS::StackName}-CodeBuildServiceRole
    
    ContainerImage:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ContainerName}
    Export:
        Name: !Sub ${AWS::StackName}-ECRImageRepository
    
    JobDefinition:
    Value:
        Fn::If:
        - CreateBatchJobDefinitionTrue
        - !Ref BatchJobDef
        - "-"
    Export:
        Name: !Sub ${AWS::StackName}-BatchJobDefinition
    
...